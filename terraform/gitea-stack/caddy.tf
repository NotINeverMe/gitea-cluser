# Caddy Reverse Proxy Container

# Pull Caddy image (conditional)
resource "docker_image" "caddy" {
  count        = var.enable_caddy ? 1 : 0
  name         = var.caddy_image
  keep_locally = true
}

# Create default Caddyfile if not provided
resource "local_file" "caddyfile" {
  count = var.enable_caddy && var.caddyfile_path == "" ? 1 : 0

  filename = "${path.module}/Caddyfile"

  content = <<-EOT
    # Caddyfile for Gitea reverse proxy
    # Auto-generated by Terraform

    {
      # Global options
      email admin@${var.gitea_domain}

      # Enable admin API
      admin off

      # Enable debug logging
      debug
    }

    # HTTP to HTTPS redirect
    :80 {
      redir https://{host}{uri} permanent
    }

    # Main site configuration
    ${var.gitea_domain}:443 {
      # TLS configuration
      tls {
        protocols tls1.2 tls1.3
        ciphers TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      }

      # Security headers
      header {
        # HSTS
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

        # Prevent clickjacking
        X-Frame-Options "SAMEORIGIN"

        # Prevent MIME type sniffing
        X-Content-Type-Options "nosniff"

        # XSS protection
        X-XSS-Protection "1; mode=block"

        # Referrer policy
        Referrer-Policy "strict-origin-when-cross-origin"

        # Permissions policy
        Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()"

        # Remove server header
        -Server
      }

      # Proxy to Gitea
      reverse_proxy ${docker_container.gitea.name}:${var.gitea_http_port} {
        # Headers
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}

        # Timeouts
        transport http {
          dial_timeout 30s
          response_header_timeout 30s
        }
      }

      # Logging
      log {
        output file /data/access.log {
          roll_size 10mb
          roll_keep 5
        }
        format json
        level INFO
      }

      # Handle errors
      handle_errors {
        @404 {
          expression {http.error.status_code} == 404
        }
        respond @404 "Page not found" 404

        @5xx {
          expression {http.error.status_code} >= 500
        }
        respond @5xx "Internal server error" 500
      }
    }

    # Metrics endpoint (internal)
    :9180 {
      metrics /metrics
    }
  EOT

  file_permission = "0644"
}

# Caddy reverse proxy container (conditional)
resource "docker_container" "caddy_gitea" {
  count = var.enable_caddy ? 1 : 0
  name  = "caddy-${var.stack_name}"
  image = docker_image.caddy[0].image_id

  restart = "unless-stopped"

  # Port mappings
  ports {
    internal = 443
    external = var.caddy_https_port
    ip       = "0.0.0.0"
  }

  ports {
    internal = 80
    external = var.caddy_http_port
    ip       = "0.0.0.0"
  }

  # Volume mounts
  volumes {
    host_path = var.caddyfile_path != "" ? var.caddyfile_path : local_file.caddyfile[0].filename
    container_path = "/etc/caddy/Caddyfile"
    read_only      = true
  }

  volumes {
    volume_name    = docker_volume.caddy_data[0].name
    container_path = "/data"
  }

  volumes {
    volume_name    = docker_volume.caddy_config[0].name
    container_path = "/config"
  }

  # Network attachment
  networks_advanced {
    name = docker_network.gitea_default.name
  }

  # Labels
  dynamic "labels" {
    for_each = local.stack_labels.caddy
    content {
      label = labels.key
      value = labels.value
    }
  }

  # Dependencies
  depends_on = [
    docker_container.gitea,
    docker_network.gitea_default,
    docker_volume.caddy_data,
    docker_volume.caddy_config
  ]

  # Ensure proper cleanup
  must_run = true

  # Log configuration
  log_driver = "json-file"
  log_opts = {
    "max-size" = "10m"
    "max-file" = "3"
  }

  # Environment variables
  env = [
    "CADDY_ADMIN=0.0.0.0:2019"
  ]

  # Health check
  healthcheck {
    test = ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
    interval = "30s"
    timeout  = "10s"
    retries  = 3
    start_period = "30s"
  }
}