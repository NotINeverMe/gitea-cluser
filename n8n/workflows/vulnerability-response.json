{
  "name": "Vulnerability Response Automation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "vulnerability-scan-result",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "scan-webhook",
      "name": "Scan Result Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 400],
      "webhookId": "security-scan-complete"
    },
    {
      "parameters": {
        "jsCode": "const scanResult = $input.item.json;\nconst vulnerabilities = [];\n\n// Parse different scan result formats\nif (scanResult.Results) {\n  // Trivy format\n  scanResult.Results.forEach(result => {\n    if (result.Vulnerabilities) {\n      result.Vulnerabilities.forEach(vuln => {\n        vulnerabilities.push({\n          id: vuln.VulnerabilityID,\n          title: vuln.Title,\n          description: vuln.Description,\n          severity: vuln.Severity,\n          cvss: vuln.CVSS?.nvd?.V3Score || vuln.CVSS?.redhat?.V3Score || 0,\n          package: vuln.PkgName,\n          version: vuln.InstalledVersion,\n          fixedVersion: vuln.FixedVersion,\n          references: vuln.References,\n          publishedDate: vuln.PublishedDate,\n          lastModifiedDate: vuln.LastModifiedDate\n        });\n      });\n    }\n  });\n} else if (scanResult.vulnerabilities) {\n  // Generic format\n  scanResult.vulnerabilities.forEach(vuln => {\n    vulnerabilities.push({\n      id: vuln.cve || vuln.id,\n      title: vuln.title || vuln.summary,\n      description: vuln.description,\n      severity: vuln.severity?.toUpperCase() || 'UNKNOWN',\n      cvss: vuln.cvssScore || vuln.cvss || 0,\n      package: vuln.component || vuln.package,\n      version: vuln.version,\n      fixedVersion: vuln.fixedIn || vuln.fixedVersion,\n      references: vuln.references || [],\n      publishedDate: vuln.publishedDate,\n      lastModifiedDate: vuln.modifiedDate\n    });\n  });\n}\n\n// Calculate CVSS scores and normalize severity\nconst processedVulns = vulnerabilities.map(vuln => {\n  let severity = vuln.severity;\n  const cvss = parseFloat(vuln.cvss) || 0;\n  \n  // Normalize severity based on CVSS if not already set\n  if (cvss >= 9.0) severity = 'CRITICAL';\n  else if (cvss >= 7.0) severity = 'HIGH';\n  else if (cvss >= 4.0) severity = 'MEDIUM';\n  else if (cvss >= 0.1) severity = 'LOW';\n  else if (!severity || severity === 'UNKNOWN') severity = 'INFO';\n  \n  return {\n    ...vuln,\n    severity: severity,\n    cvss: cvss,\n    scanId: scanResult.scanId || `scan-${Date.now()}`,\n    repository: scanResult.repository || 'unknown',\n    branch: scanResult.branch || 'main',\n    commitSha: scanResult.commitSha || 'unknown',\n    scanTimestamp: scanResult.timestamp || new Date().toISOString()\n  };\n});\n\n// Categorize by severity\nconst categorized = {\n  CRITICAL: processedVulns.filter(v => v.severity === 'CRITICAL'),\n  HIGH: processedVulns.filter(v => v.severity === 'HIGH'),\n  MEDIUM: processedVulns.filter(v => v.severity === 'MEDIUM'),\n  LOW: processedVulns.filter(v => v.severity === 'LOW'),\n  INFO: processedVulns.filter(v => v.severity === 'INFO')\n};\n\nreturn {\n  scanId: processedVulns[0]?.scanId || `scan-${Date.now()}`,\n  repository: processedVulns[0]?.repository || scanResult.repository,\n  branch: processedVulns[0]?.branch || scanResult.branch,\n  commitSha: processedVulns[0]?.commitSha || scanResult.commitSha,\n  totalVulnerabilities: processedVulns.length,\n  vulnerabilities: processedVulns,\n  categorized: categorized,\n  scanTimestamp: new Date().toISOString(),\n  originalScanResult: scanResult\n};"
      },
      "id": "parse-vulns",
      "name": "Parse Vulnerability Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT cve_id FROM vulnerability_tracking WHERE repository = $1 AND status != 'resolved'",
        "additionalFields": {
          "queryParams": "={{ $json.repository }}"
        }
      },
      "id": "check-existing",
      "name": "Deduplication Check",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [650, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const parsed = $('Parse Vulnerability Data').item.json;\nconst existing = $('Deduplication Check').all().map(i => i.json.cve_id);\n\nconst newVulnerabilities = parsed.vulnerabilities.filter(vuln => !existing.includes(vuln.id));\nconst updatedVulnerabilities = parsed.vulnerabilities.filter(vuln => existing.includes(vuln.id));\n\n// Recategorize only new vulnerabilities\nconst newCategorized = {\n  CRITICAL: newVulnerabilities.filter(v => v.severity === 'CRITICAL'),\n  HIGH: newVulnerabilities.filter(v => v.severity === 'HIGH'),\n  MEDIUM: newVulnerabilities.filter(v => v.severity === 'MEDIUM'),\n  LOW: newVulnerabilities.filter(v => v.severity === 'LOW'),\n  INFO: newVulnerabilities.filter(v => v.severity === 'INFO')\n};\n\nreturn {\n  scanId: parsed.scanId,\n  repository: parsed.repository,\n  branch: parsed.branch,\n  commitSha: parsed.commitSha,\n  newVulnerabilities: newVulnerabilities,\n  updatedVulnerabilities: updatedVulnerabilities,\n  newCount: newVulnerabilities.length,\n  updateCount: updatedVulnerabilities.length,\n  categorized: newCategorized,\n  scanTimestamp: parsed.scanTimestamp\n};"
      },
      "id": "dedupe-vulns",
      "name": "Filter New Vulnerabilities",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.categorized.CRITICAL.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "critical-route",
      "name": "Route CRITICAL",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1050, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.categorized.HIGH.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "high-route",
      "name": "Route HIGH",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.categorized.MEDIUM.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "medium-route",
      "name": "Route MEDIUM",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1050, 600]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "content": "CRITICAL Security Alert",
        "additionalFields": {
          "cards": [
            {
              "header": {
                "title": "🚨 CRITICAL VULNERABILITIES DETECTED",
                "subtitle": "={{ $json.repository }}",
                "imageUrl": "https://fonts.gstatic.com/s/i/short-term/release/googlesymbols/emergency/default/48px.svg"
              },
              "sections": [
                {
                  "header": "Immediate Action Required",
                  "widgets": [
                    {
                      "keyValue": {
                        "topLabel": "Critical CVEs Found",
                        "content": "={{ $json.categorized.CRITICAL.length }}",
                        "bottomLabel": "24-hour SLA",
                        "icon": "ERROR"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "Repository",
                        "content": "={{ $json.repository }}"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "Branch",
                        "content": "={{ $json.branch }}"
                      }
                    }
                  ]
                },
                {
                  "header": "Critical Vulnerabilities",
                  "widgets": "={{ $json.categorized.CRITICAL.slice(0, 3).map(v => ({ keyValue: { topLabel: v.id, content: `CVSS: ${v.cvss} - ${v.package}`, bottomLabel: v.title?.substring(0, 50) } })) }}"
                }
              ]
            }
          ],
          "threadKey": "critical-security-alerts"
        }
      },
      "id": "critical-gchat",
      "name": "Critical Google Chat Alert",
      "type": "n8n-nodes-base.googleChat",
      "typeVersion": 1,
      "position": [1250, 100],
      "credentials": {
        "googleChatOAuth2Api": {
          "id": "gchat-oauth",
          "name": "Google Chat OAuth2"
        }
      }
    },
    {
      "parameters": {
        "resource": "incident",
        "operation": "create",
        "summary": "=CRITICAL: {{ $json.categorized.CRITICAL.length }} vulnerabilities in {{ $json.repository }}",
        "additionalFields": {
          "urgency": "high",
          "details": "={{ JSON.stringify($json.categorized.CRITICAL, null, 2) }}",
          "incidentKey": "={{ $json.repository }}-{{ $json.categorized.CRITICAL[0].id }}"
        }
      },
      "id": "pagerduty",
      "name": "PagerDuty Alert",
      "type": "n8n-nodes-base.pagerDuty",
      "typeVersion": 1,
      "position": [1250, 200],
      "credentials": {
        "pagerDutyApi": {
          "id": "pagerduty-api",
          "name": "PagerDuty API"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "content": "={{ $json.categorized.map(severity => $json.categorized[severity].map(vuln => ({\n  severity: severity,\n  vuln: vuln\n}))).flat() }}",
        "options": {}
      },
      "id": "prepare-issues",
      "name": "Prepare Issue Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1450, 400]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-issues",
      "name": "Split for Issue Creation",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1650, 400]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "requestMethod": "POST",
        "url": "=http://gitea:3000/api/v1/repos/{{ $('Filter New Vulnerabilities').item.json.repository }}/issues",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"[SECURITY] {{ $json.vuln.id }} in {{ $json.vuln.package }}\",\n  \"body\": \"## Security Vulnerability Report\\n\\n**CVE ID:** {{ $json.vuln.id }}\\n**Severity:** {{ $json.severity }}\\n**CVSS Score:** {{ $json.vuln.cvss }}\\n**Package:** {{ $json.vuln.package }}\\n**Current Version:** {{ $json.vuln.version }}\\n**Fixed Version:** {{ $json.vuln.fixedVersion || 'Not available' }}\\n\\n### Description\\n{{ $json.vuln.description }}\\n\\n### Recommended Remediation\\n1. Update {{ $json.vuln.package }} to version {{ $json.vuln.fixedVersion || 'latest' }}\\n2. Test the update in a staging environment\\n3. Deploy the fix to production\\n4. Verify the vulnerability is resolved\\n\\n### References\\n{{ $json.vuln.references?.join('\\\\n') || 'No references available' }}\\n\\n### SLA Information\\n- **{{ $json.severity }}** severity: {{ $json.severity === 'CRITICAL' ? '24 hours' : $json.severity === 'HIGH' ? '72 hours' : $json.severity === 'MEDIUM' ? '7 days' : '30 days' }}\\n- **Detection Time:** {{ $('Filter New Vulnerabilities').item.json.scanTimestamp }}\\n- **Deadline:** {{ $json.severity === 'CRITICAL' ? new Date(Date.now() + 24*60*60*1000).toISOString() : $json.severity === 'HIGH' ? new Date(Date.now() + 72*60*60*1000).toISOString() : $json.severity === 'MEDIUM' ? new Date(Date.now() + 7*24*60*60*1000).toISOString() : new Date(Date.now() + 30*24*60*60*1000).toISOString() }}\\n\\n### Evidence Package\\n- **Scan ID:** {{ $('Filter New Vulnerabilities').item.json.scanId }}\\n- **Repository:** {{ $('Filter New Vulnerabilities').item.json.repository }}\\n- **Branch:** {{ $('Filter New Vulnerabilities').item.json.branch }}\\n- **Commit:** {{ $('Filter New Vulnerabilities').item.json.commitSha }}\\n\\n---\\n*This issue was automatically created by the Vulnerability Response workflow*\",\n  \"labels\": [\"security\", \"{{ $json.severity.toLowerCase() }}\", \"cve\", \"automated\"]\n}"
      },
      "id": "create-gitea-issue",
      "name": "Create Gitea Issue",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1850, 400],
      "credentials": {
        "httpHeaderAuth": {
          "id": "gitea-api-key",
          "name": "Gitea API Key"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO vulnerability_tracking (cve_id, repository, branch, severity, cvss_score, package_name, current_version, fixed_version, status, sla_hours, detection_time, deadline, issue_url, scan_id, metadata) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) ON CONFLICT (cve_id, repository) DO UPDATE SET last_seen = NOW(), scan_id = $14, metadata = $15",
        "additionalFields": {
          "queryParams": "={{ $json.vuln.id }},{{ $('Filter New Vulnerabilities').item.json.repository }},{{ $('Filter New Vulnerabilities').item.json.branch }},{{ $json.severity }},{{ $json.vuln.cvss }},{{ $json.vuln.package }},{{ $json.vuln.version }},{{ $json.vuln.fixedVersion || null }},open,{{ $json.severity === 'CRITICAL' ? 24 : $json.severity === 'HIGH' ? 72 : $json.severity === 'MEDIUM' ? 168 : 720 }},{{ $('Filter New Vulnerabilities').item.json.scanTimestamp }},{{ $json.severity === 'CRITICAL' ? new Date(Date.now() + 24*60*60*1000).toISOString() : $json.severity === 'HIGH' ? new Date(Date.now() + 72*60*60*1000).toISOString() : $json.severity === 'MEDIUM' ? new Date(Date.now() + 7*24*60*60*1000).toISOString() : new Date(Date.now() + 30*24*60*60*1000).toISOString() }},{{ $('Create Gitea Issue').item.json.html_url || null }},{{ $('Filter New Vulnerabilities').item.json.scanId }},{{ JSON.stringify($json) }}"
        }
      },
      "id": "track-sla",
      "name": "Track SLA",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2050, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO vulnerability_evidence (scan_id, repository, branch, commit_sha, scan_timestamp, total_vulnerabilities, critical_count, high_count, medium_count, low_count, scan_report, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW())",
        "additionalFields": {
          "queryParams": "={{ $json.scanId }},{{ $json.repository }},{{ $json.branch }},{{ $json.commitSha }},{{ $json.scanTimestamp }},{{ $json.newCount }},{{ $json.categorized.CRITICAL.length }},{{ $json.categorized.HIGH.length }},{{ $json.categorized.MEDIUM.length }},{{ $json.categorized.LOW.length }},{{ JSON.stringify($json) }}"
        }
      },
      "id": "collect-evidence",
      "name": "Evidence Collection",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1050, 800],
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "content": "Vulnerability Scan Summary",
        "additionalFields": {
          "cards": [
            {
              "header": {
                "title": "Security Scan Complete",
                "subtitle": "={{ $json.repository }}",
                "imageUrl": "https://fonts.gstatic.com/s/i/short-term/release/googlesymbols/security/default/48px.svg"
              },
              "sections": [
                {
                  "header": "Scan Summary",
                  "widgets": [
                    {
                      "keyValue": {
                        "topLabel": "New Vulnerabilities",
                        "content": "={{ $json.newCount }}"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "Updated",
                        "content": "={{ $json.updateCount }}"
                      }
                    }
                  ]
                },
                {
                  "header": "Severity Distribution",
                  "widgets": [
                    {
                      "keyValue": {
                        "topLabel": "Critical",
                        "content": "={{ $json.categorized.CRITICAL.length }}",
                        "bottomLabel": "24h SLA",
                        "icon": "={{ $json.categorized.CRITICAL.length > 0 ? 'ERROR' : 'STAR' }}"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "High",
                        "content": "={{ $json.categorized.HIGH.length }}",
                        "bottomLabel": "72h SLA"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "Medium",
                        "content": "={{ $json.categorized.MEDIUM.length }}",
                        "bottomLabel": "7d SLA"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "Low",
                        "content": "={{ $json.categorized.LOW.length }}",
                        "bottomLabel": "30d SLA"
                      }
                    }
                  ]
                },
                {
                  "widgets": [
                    {
                      "keyValue": {
                        "topLabel": "Scan ID",
                        "content": "={{ $json.scanId }}"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "Commit",
                        "content": "={{ $json.commitSha.substring(0, 8) }}"
                      }
                    }
                  ]
                },
                {
                  "widgets": [
                    {
                      "buttons": [
                        {
                          "textButton": {
                            "text": "View Issues",
                            "onClick": {
                              "openLink": {
                                "url": "=http://gitea:3000/{{ $json.repository }}/issues?labels=security"
                              }
                            }
                          }
                        },
                        {
                          "textButton": {
                            "text": "View Evidence",
                            "onClick": {
                              "openLink": {
                                "url": "=https://console.cloud.google.com/storage/browser/compliance-evidence-ssdf/{{ $json.repository }}"
                              }
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "threadKey": "vulnerability-scans"
        }
      },
      "id": "final-notification",
      "name": "Send Summary Notification",
      "type": "n8n-nodes-base.googleChat",
      "typeVersion": 1,
      "position": [2250, 400],
      "credentials": {
        "googleChatOAuth2Api": {
          "id": "gchat-oauth",
          "name": "Google Chat OAuth2"
        }
      }
    },
    {
      "parameters": {
        "unit": "hours",
        "amount": 6
      },
      "id": "sla-timer",
      "name": "SLA Reminder Timer",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [2050, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT cve_id, repository, severity, sla_hours, detection_time, deadline, EXTRACT(HOUR FROM deadline - NOW()) as hours_remaining FROM vulnerability_tracking WHERE status = 'open' AND deadline > NOW() AND deadline < NOW() + INTERVAL '6 hours' ORDER BY deadline ASC"
      },
      "id": "check-sla",
      "name": "Check SLA Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2250, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "content": "SLA Reminder",
        "additionalFields": {
          "cards": [
            {
              "header": {
                "title": "⏰ SLA Deadline Approaching",
                "subtitle": "Action Required",
                "imageUrl": "https://fonts.gstatic.com/s/i/short-term/release/googlesymbols/schedule/default/48px.svg"
              },
              "sections": [
                {
                  "widgets": "={{ $json.map(v => ({ keyValue: { topLabel: `${v.severity} - ${v.cve_id}`, content: v.repository, bottomLabel: `${v.hours_remaining}h remaining`, icon: v.hours_remaining < 6 ? 'ERROR' : 'CLOCK' } })) }}"
                }
              ]
            }
          ],
          "threadKey": "sla-reminders"
        }
      },
      "id": "sla-reminder",
      "name": "Send SLA Reminder",
      "type": "n8n-nodes-base.googleChat",
      "typeVersion": 1,
      "position": [2450, 600],
      "credentials": {
        "googleChatOAuth2Api": {
          "id": "gchat-oauth",
          "name": "Google Chat OAuth2"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Vulnerability scan processed successfully"
            }
          ],
          "number": [
            {
              "name": "newVulnerabilities",
              "value": "={{ $('Filter New Vulnerabilities').item.json.newCount }}"
            },
            {
              "name": "issuesCreated",
              "value": "={{ $('Filter New Vulnerabilities').item.json.newCount }}"
            }
          ]
        },
        "options": {}
      },
      "id": "webhook-response-data",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [2450, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2650, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT severity, COUNT(*) as count FROM vulnerability_tracking WHERE repository = $1 AND created_at >= NOW() - INTERVAL '7 days' GROUP BY severity",
        "additionalFields": {
          "queryParams": "={{ $json.repository }}"
        }
      },
      "id": "weekly-digest",
      "name": "Generate Weekly Digest",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1250, 800],
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    }
  ],
  "connections": {
    "Scan Result Webhook": {
      "main": [
        [
          {
            "node": "Parse Vulnerability Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Vulnerability Data": {
      "main": [
        [
          {
            "node": "Deduplication Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplication Check": {
      "main": [
        [
          {
            "node": "Filter New Vulnerabilities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter New Vulnerabilities": {
      "main": [
        [
          {
            "node": "Route CRITICAL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route HIGH",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route MEDIUM",
            "type": "main",
            "index": 0
          },
          {
            "node": "Evidence Collection",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Weekly Digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route CRITICAL": {
      "main": [
        [
          {
            "node": "Critical Google Chat Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "PagerDuty Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Issue Data",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Route HIGH": {
      "main": [
        [
          {
            "node": "Prepare Issue Data",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Route MEDIUM": {
      "main": [
        [
          {
            "node": "Prepare Issue Data",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Prepare Issue Data": {
      "main": [
        [
          {
            "node": "Split for Issue Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split for Issue Creation": {
      "main": [
        [
          {
            "node": "Create Gitea Issue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Gitea Issue": {
      "main": [
        [
          {
            "node": "Track SLA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Track SLA": {
      "main": [
        [
          {
            "node": "Send Summary Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "SLA Reminder Timer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SLA Reminder Timer": {
      "main": [
        [
          {
            "node": "Check SLA Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check SLA Status": {
      "main": [
        [
          {
            "node": "Send SLA Reminder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Summary Notification": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handler-workflow"
  },
  "staticData": null,
  "tags": [
    {
      "name": "Security",
      "id": "security"
    },
    {
      "name": "Vulnerability Management",
      "id": "vuln-mgmt"
    },
    {
      "name": "SSDF",
      "id": "ssdf-compliance"
    },
    {
      "name": "Automation",
      "id": "automation"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-01-07T10:00:00.000Z",
  "id": "vulnerability-response",
  "meta": {
    "instanceId": "n8n-instance"
  },
  "versionId": "1.0.0",
  "description": "Automates vulnerability response based on severity. Parses scan results, deduplicates CVEs, routes by severity (CRITICAL→PagerDuty+GoogleChat, HIGH→GoogleChat+Issue, MEDIUM→Issue only, LOW→Weekly digest). Creates Gitea issues with SLA tracking, collects evidence, and sends reminders for approaching deadlines."
}