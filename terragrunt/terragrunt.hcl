# Root Terragrunt Configuration
# CMMC 2.0: CM.L2-3.4.2 (Baseline Configuration Management)
# NIST SP 800-171: 3.4.2 (Security Configuration Baselines)

# -----------------------------------------------------------------------------
# GLOBAL CONFIGURATION
# -----------------------------------------------------------------------------

locals {
  # Parse environment from path
  environment = element(split("/", path_relative_to_include()), 1)

  # Load environment-specific variables
  env_vars = read_terragrunt_config(find_in_parent_folders("env.hcl", "env.hcl"))

  # Common variables
  project_id = local.env_vars.locals.project_id
  region     = local.env_vars.locals.region
  zone       = local.env_vars.locals.zone

  # Compliance tags
  common_labels = {
    managed_by           = "terragrunt"
    environment         = local.environment
    cmmc_control        = "CM.L2-3.4.2"
    nist_control        = "SP-800-171-3.4.2"
    terraform_version   = "1.6.0"
    terragrunt_version  = "0.52.0"
    last_modified       = timestamp()
  }

  # Backend configuration
  backend_bucket = "${local.project_id}-terraform-state"
  backend_prefix = "${local.environment}/${path_relative_to_include()}"
}

# -----------------------------------------------------------------------------
# REMOTE STATE CONFIGURATION
# -----------------------------------------------------------------------------

remote_state {
  backend = "gcs"

  generate = {
    path      = "backend.tf"
    if_exists = "overwrite_terragrunt"
  }

  config = {
    bucket   = local.backend_bucket
    prefix   = local.backend_prefix
    project  = local.project_id
    location = local.region

    # Enable versioning for state history (CMMC requirement)
    enable_bucket_policy_only = true

    # Encryption with customer-managed keys
    encryption_key = "projects/${local.project_id}/locations/${local.region}/keyRings/terraform-state/cryptoKeys/state-key"
  }
}

# -----------------------------------------------------------------------------
# PROVIDER CONFIGURATION
# -----------------------------------------------------------------------------

generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite_terragrunt"

  contents = <<-EOF
    # Generated by Terragrunt
    # CMMC 2.0: CM.L2-3.4.3 (Track Configuration Changes)

    terraform {
      required_version = ">= 1.5.0, < 2.0.0"

      required_providers {
        google = {
          source  = "hashicorp/google"
          version = "~> 5.0"
        }
        google-beta = {
          source  = "hashicorp/google-beta"
          version = "~> 5.0"
        }
        random = {
          source  = "hashicorp/random"
          version = "~> 3.6"
        }
      }
    }

    provider "google" {
      project = "${local.project_id}"
      region  = "${local.region}"
      zone    = "${local.zone}"

      # Impersonation for least privilege
      impersonate_service_account = "${local.project_id}@${local.project_id}.iam.gserviceaccount.com"

      # Request reason for audit logging
      request_reason = "Terragrunt deployment - ${local.environment}"

      # User project for quota and billing
      user_project_override = true
      billing_project      = "${local.project_id}"

      # Default labels for all resources
      default_labels = ${jsonencode(local.common_labels)}
    }

    provider "google-beta" {
      project = "${local.project_id}"
      region  = "${local.region}"
      zone    = "${local.zone}"

      impersonate_service_account = "${local.project_id}@${local.project_id}.iam.gserviceaccount.com"
      request_reason = "Terragrunt deployment - ${local.environment}"
      user_project_override = true
      billing_project      = "${local.project_id}"

      default_labels = ${jsonencode(local.common_labels)}
    }
  EOF
}

# -----------------------------------------------------------------------------
# TERRAFORM CONFIGURATION
# -----------------------------------------------------------------------------

terraform {
  # Run terraform init before/after hooks
  before_hook "before_init" {
    commands = ["init"]
    execute  = ["echo", "Initializing Terraform for ${local.environment} environment"]
  }

  after_hook "after_init" {
    commands = ["init"]
    execute  = ["echo", "Terraform initialization complete"]
  }

  # Validate configuration before plan
  before_hook "validate" {
    commands = ["plan", "apply"]
    execute  = ["terraform", "validate"]
  }

  # Format check
  before_hook "fmt_check" {
    commands = ["plan", "apply"]
    execute  = ["terraform", "fmt", "-check=true", "-diff=true"]
  }

  # Security scanning with Checkov
  after_hook "checkov_scan" {
    commands     = ["plan"]
    execute      = ["bash", "-c", "checkov -d . --framework terraform --output json > /tmp/checkov-${local.environment}.json || true"]
    run_on_error = false
  }

  # tfsec scanning
  after_hook "tfsec_scan" {
    commands     = ["plan"]
    execute      = ["bash", "-c", "tfsec . --format json > /tmp/tfsec-${local.environment}.json || true"]
    run_on_error = false
  }

  # Cost estimation with Infracost
  after_hook "cost_estimate" {
    commands     = ["plan"]
    execute      = ["bash", "-c", "infracost breakdown --path . --format json --out-file /tmp/infracost-${local.environment}.json || true"]
    run_on_error = false
  }

  # Evidence collection after apply
  after_hook "collect_evidence" {
    commands = ["apply"]
    execute  = ["bash", "-c", <<-SCRIPT
      echo "Apply completed at $(date -Iseconds)" > /tmp/apply-evidence-${local.environment}.txt
      echo "Environment: ${local.environment}" >> /tmp/apply-evidence-${local.environment}.txt
      echo "Git commit: $(git rev-parse HEAD 2>/dev/null || echo 'N/A')" >> /tmp/apply-evidence-${local.environment}.txt
      sha256sum /tmp/apply-evidence-${local.environment}.txt
    SCRIPT
    ]
    run_on_error = false
  }

  # Upload evidence to GCS
  after_hook "upload_evidence" {
    commands = ["apply"]
    execute  = ["bash", "-c", <<-SCRIPT
      if [ -f /tmp/apply-evidence-${local.environment}.txt ]; then
        gsutil -h "x-goog-meta-cmmc:CM.L2-3.4.2" \
               -h "x-goog-meta-nist:SP800-171-3.4.2" \
               -h "x-goog-meta-environment:${local.environment}" \
               cp /tmp/*-${local.environment}.* \
               gs://${local.backend_bucket}/evidence/$(date +%Y%m%d)/ 2>/dev/null || true
      fi
    SCRIPT
    ]
    run_on_error = false
  }

  # Extra arguments for all commands
  extra_arguments "common_vars" {
    commands = get_terraform_commands_that_need_vars()

    optional_var_files = [
      find_in_parent_folders("common.tfvars", "skip"),
      find_in_parent_folders("env.tfvars", "skip"),
    ]
  }

  # Retry configuration
  extra_arguments "retry_lock" {
    commands = get_terraform_commands_that_need_locking()

    arguments = [
      "-lock-timeout=20m",
    ]
  }

  # Parallelism control
  extra_arguments "parallelism" {
    commands = ["plan", "apply", "destroy"]

    arguments = [
      "-parallelism=10",
    ]
  }
}

# -----------------------------------------------------------------------------
# INPUT VARIABLES
# -----------------------------------------------------------------------------

inputs = merge(
  local.env_vars.locals,
  {
    # Common inputs for all modules
    project_id    = local.project_id
    region        = local.region
    zone          = local.zone
    environment   = local.environment

    # Compliance labels
    labels = local.common_labels

    # Network configuration
    network_name = "${local.project_id}-${local.environment}-vpc"
    subnet_name  = "${local.project_id}-${local.environment}-subnet"

    # Security configuration
    enable_private_google_access = true
    enable_flow_logs            = true
    enable_cloud_nat            = true
    enable_cloud_armor          = local.environment == "prod" ? true : false

    # Monitoring configuration
    enable_monitoring = true
    enable_logging   = true
    log_retention_days = local.environment == "prod" ? 365 : 30

    # Backup configuration
    enable_backups = true
    backup_retention_days = local.environment == "prod" ? 30 : 7

    # High availability
    enable_ha = local.environment == "prod" ? true : false

    # Encryption
    kms_key_ring = "projects/${local.project_id}/locations/${local.region}/keyRings/terraform-${local.environment}"
    kms_crypto_key = "projects/${local.project_id}/locations/${local.region}/keyRings/terraform-${local.environment}/cryptoKeys/default"
  }
)

# -----------------------------------------------------------------------------
# DEPENDENCY CONFIGURATION
# -----------------------------------------------------------------------------

# Automatically retry on dependency errors
retryable_errors = [
  # GCP API errors
  ".*Error 400.*",
  ".*Error 403.*",
  ".*Error 409.*",
  ".*Error 429.*",
  ".*Error 500.*",
  ".*Error 502.*",
  ".*Error 503.*",

  # State locking errors
  ".*Error acquiring the state lock.*",
  ".*state blob is already locked.*",

  # Network errors
  ".*i/o timeout.*",
  ".*connection reset by peer.*",
]

retry_max_attempts       = 3
retry_sleep_interval_sec = 30

# -----------------------------------------------------------------------------
# TERRAGRUNT CONFIGURATION
# -----------------------------------------------------------------------------

# Skip prompts for CI/CD
skip = false
terragrunt_version_constraint = ">= 0.50.0"
terraform_version_constraint  = ">= 1.5.0, < 2.0.0"

# Download Terraform configurations to a temp folder
download_dir = "${get_terragrunt_dir()}/.terragrunt-cache"

# Prevent deletion of dependency outputs
prevent_destroy_dependencies = true